generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Role values: tenant, service_tech, manager, admin

// IssueType values: plumbing, electrical, hvac, appliances, security, common_areas, structural, pest, other

// Urgency values: emergency, urgent, standard, low_priority, routine

// TicketStatus values: open, awaiting_approval, in_progress, closed

// SubmissionMethod values: form, phone_ai, email, legacy_import

// UpdateType values: comment, status_change, assignment, system

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  passwordHash   String
  firstName      String?
  lastName       String?
  phone          String?
  role           String
  employeeId     String?  @unique
  isActive       Boolean  @default(true)
  emailVerified  Boolean  @default(false)
  tickets            Ticket[]       @relation("TicketTenant")
  assignedTickets    Ticket[]       @relation("TicketTech")
  managedProperties  Property[]     @relation("PropertyManager")
  managedTickets     Ticket[]       @relation("TicketManager")
  tenantUnits        Unit[]       @relation("TenantUnits")
  workLogs           WorkLog[]      @relation("WorkLogTech")
  documents          Document[]     @relation("UploadedDocuments")
  ticketUpdates      TicketUpdate[] @relation("TicketUpdateUser")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Property {
  id            Int      @id @default(autoincrement())
  name          String
  address       String
  city          String
  state         String
  zipCode       String
  manager       User?    @relation("PropertyManager", fields: [managerId], references: [id])
  managerId     Int?
  propertyType  String?
  totalUnits    Int?
  phone         String?
  emergencyContact String?
  units         Unit[]
  tickets       Ticket[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Unit {
  id            Int      @id @default(autoincrement())
  property      Property @relation(fields: [propertyId], references: [id])
  propertyId    Int
  unitNumber    String
  tenant        User?    @relation("TenantUnits", fields: [tenantId], references: [id])
  tenantId      Int?
  bedrooms      Int?
  bathrooms     Int?
  squareFeet    Int?
  monthlyRent   Float?
  leaseStartDate DateTime?
  leaseEndDate  DateTime?
  isOccupied    Boolean  @default(false)
  tickets       Ticket[]
  @@unique([propertyId, unitNumber])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Ticket {
  id           Int      @id @default(autoincrement())
  ticketNumber String   @unique
  property     Property @relation(fields: [propertyId], references: [id])
  propertyId   Int
  unit         Unit?    @relation(fields: [unitId], references: [id])
  unitId       Int?
  tenant       User     @relation("TicketTenant", fields: [tenantId], references: [id])
  tenantId     Int
  assignedManager  User? @relation("TicketManager", fields: [assignedManagerId], references: [id])
  assignedManagerId Int?
  assignedTech User?   @relation("TicketTech", fields: [assignedTechId], references: [id])
  assignedTechId Int?
  issueType    String
  problemDescription String
  urgency      String
  status       String @default("open")
  priority     Int?
  submittedDate DateTime @default(now())
  anticipatedCompletionDate DateTime?
  completionDate DateTime?
  contactName  String?
  contactPhone String?
  contactEmail String?
  submissionMethod String @default("form")
  aiAnalysis   String?
  aiAssignmentReason String?
  isDeleted    Boolean @default(false)
  workLogs     WorkLog[]
  costs        TicketCost?
  updates      TicketUpdate[]
  documents    Document[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@index([status, assignedTechId, submittedDate])
}

model WorkLog {
  id             Int          @id @default(autoincrement())
  ticket         Ticket       @relation(fields: [ticketId], references: [id])
  ticketId       Int
  technician     User         @relation("WorkLogTech", fields: [technicianId], references: [id])
  technicianId   Int
  contractor     Contractor?  @relation(fields: [contractorId], references: [id])
  contractorId   Int?
  workDate       DateTime
  hoursWorked    Float
  isBillable     Boolean      @default(true)
  milesTraveled  Float?
  workNotes      String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model TicketCost {
  id          Int     @id @default(autoincrement())
  ticket      Ticket  @relation(fields: [ticketId], references: [id])
  ticketId    Int     @unique
  materialCost Float?
  pwoContractorCost Float?
  pwoCabotFee Float?
  totalPwoContractorCost Float?
  contractorCost Float?
  cabotFee    Float?
  totalContractorCost Float?
  milesCost   Float?
  serviceCost Float?
  serviceTax  Float?
  totalServiceCost Float?
  totalCost   Float?
}

model Contractor {
  id           Int       @id @default(autoincrement())
  name         String
  contactInfo  String?
  workNotes    String?
  workLogs     WorkLog[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Document {
  id          Int      @id @default(autoincrement())
  url         String
  fileName    String
  mimeType    String
  size        Int
  ticket      Ticket?  @relation(fields: [ticketId], references: [id])
  ticketId    Int?
  uploadedBy  User?    @relation("UploadedDocuments", fields: [uploadedById], references: [id])
  uploadedById Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TicketUpdate {
  id          Int      @id @default(autoincrement())
  ticket      Ticket   @relation(fields: [ticketId], references: [id])
  ticketId    Int
  user        User?    @relation("TicketUpdateUser", fields: [userId], references: [id])
  userId      Int?
  updateType  String
  message     String?
  oldValue    String?
  newValue    String?
  isInternal  Boolean  @default(false)
  createdAt   DateTime @default(now())
}
